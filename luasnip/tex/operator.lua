local utils = require("_utils")
local tex = require("_tex")
return {
	s({ trig = "<- ", snippetType = "autosnippet" }, { t([[\leftarrow ]]) }, { condition = tex.in_mathzone }),
	s({ trig = "-> ", snippetType = "autosnippet" }, { t([[\rightarrow ]]) }, { condition = tex.in_mathzone }),
	s({ trig = "to", snippetType = "autosnippet" }, { t([[\to ]]) }, { condition = tex.in_mathzone }),
	s({ trig = "<->", snippetType = "autosnippet" }, { t([[\leftrightarrow ]]) }, { condition = tex.in_mathzone }),
	s({ trig = "<=>", snippetType = "autosnippet" }, { t([[\Leftrightarrow ]]) }, { condition = tex.in_mathzone }),
	s({ trig = "<--", snippetType = "autosnippet" }, { t([[\longleftarrow ]]) }, { condition = tex.in_mathzone }),
	s({ trig = "-->", snippetType = "autosnippet" }, { t([[\longrightarrow ]]) }, { condition = tex.in_mathzone }),
	s({ trig = "<==", snippetType = "autosnippet" }, { t([[\Longleftarrow ]]) }, { condition = tex.in_mathzone }),
	s({ trig = "==>", snippetType = "autosnippet" }, { t([[\Longrightarrow ]]) }, { condition = tex.in_mathzone }),
	s({ trig = ">>", snippetType = "autosnippet" }, { t([[\implies ]]) }, { condition = tex.in_mathzone }),

	s({ trig = "lq", snippetType = "autosnippet" }, { t([[\leq ]]) }, { condition = tex.in_mathzone }),
	s({ trig = "gq", snippetType = "autosnippet" }, { t([[\geq ]]) }, { condition = tex.in_mathzone }),
	s({ trig = "leq", snippetType = "autosnippet" }, { t([[\leq ]]) }, { condition = tex.in_mathzone }),
	s({ trig = "geq", snippetType = "autosnippet" }, { t([[\geq ]]) }, { condition = tex.in_mathzone }),
	s({ trig = "eq", snippetType = "autosnippet" }, { t([[= ]]) }, { condition = tex.in_mathzone }),
	s({ trig = "nq", snippetType = "autosnippet" }, { t([[\neq ]]) }, { condition = tex.in_mathzone }),
	s({ trig = "<= ", snippetType = "autosnippet" }, { t([[\leq ]]) }, { condition = tex.in_mathzone }),
	s({ trig = ">= ", snippetType = "autosnippet" }, { t([[\geq ]]) }, { condition = tex.in_mathzone }),
	s({ trig = "!=", snippetType = "autosnippet" }, { t([[\neq ]]) }, { condition = tex.in_mathzone }),
	s({ trig = "===", snippetType = "autosnippet" }, { t([[\equiv ]]) }, { condition = tex.in_mathzone }),
	s({ trig = "sim", snippetType = "autosnippet" }, { t([[\sim ]]) }, { condition = tex.in_mathzone }),
	s({ trig = "app", snippetType = "autosnippet" }, { t([[\approx ]]) }, { condition = tex.in_mathzone }),
	s({ trig = "~~", snippetType = "autosnippet" }, { t([[\approx ]]) }, { condition = tex.in_mathzone }),
	s({ trig = "|=", snippetType = "autosnippet" }, { t([[\models ]]) }, { condition = tex.in_mathzone }),
	s({ trig = "|-", snippetType = "autosnippet" }, { t([[\vdash ]]) }, { condition = tex.in_mathzone }),

	s({ trig = "lor", snippetType = "autosnippet" }, { t([[\lor ]]) }, { condition = tex.in_mathzone }),
	s({ trig = "land", snippetType = "autosnippet" }, { t([[\land ]]) }, { condition = tex.in_mathzone }),
	s({ trig = "neg", snippetType = "autosnippet" }, { t([[\neg ]]) }, { condition = tex.in_mathzone }),
	s({ trig = "not", snippetType = "autosnippet" }, { t([[\not ]]) }, { condition = tex.in_mathzone }),
	s({ trig = "cup", snippetType = "autosnippet" }, { t([[\cup ]]) }, { condition = tex.in_mathzone }),
	s({ trig = "cap", snippetType = "autosnippet" }, { t([[\cap ]]) }, { condition = tex.in_mathzone }),

	-- s({ trig = "sb ", snippetType = "autosnippet" }, { t([[\subseteq ]]) }, { condition = tex.in_mathzone }),
	-- s({ trig = "sbe", snippetType = "autosnippet" }, { t([[\subseteq]]) }, { condition = tex.in_mathzone }),
	-- s({ trig = "sbn", snippetType = "autosnippet" }, { t([[\subsetneq]]) }, { condition = tex.in_mathzone }),
	-- s({ trig = "spe", snippetType = "autosnippet" }, { t([[\supseteq]]) }, { condition = tex.in_mathzone }),
	-- s({ trig = "spn", snippetType = "autosnippet" }, { t([[\supsetneq]]) }, { condition = tex.in_mathzone }),
	s({ trig = "/0", snippetType = "autosnippet" }, { t([[\varnothing ]]) }, { condition = tex.in_mathzone }),
	s({ trig = "s<=", snippetType = "autosnippet" }, { t([[\subseteq ]]) }, { condition = tex.in_mathzone }),
	s({ trig = "s< ", snippetType = "autosnippet" }, { t([[\subsetneq ]]) }, { condition = tex.in_mathzone }),
	s({ trig = "s>=", snippetType = "autosnippet" }, { t([[\supseteq ]]) }, { condition = tex.in_mathzone }),
	s({ trig = "s> ", snippetType = "autosnippet" }, { t([[\supsetneq ]]) }, { condition = tex.in_mathzone }),

	s({ trig = "in ", snippetType = "autosnippet" }, { t([[\in ]]) }, { condition = tex.in_mathzone }),
	s({ trig = "ni", snippetType = "autosnippet" }, { t([[\ni ]]) }, { condition = tex.in_mathzone }),
	s({ trig = "c.", snippetType = "autosnippet" }, { t([[\cdot ]]) }, { condition = tex.in_mathzone }),
	s({ trig = "all", snippetType = "autosnippet" }, { t([[\forall ]]) }, { condition = tex.in_mathzone }),
	s({ trig = "ext", snippetType = "autosnippet" }, { t([[\exists]]) }, { condition = tex.in_mathzone }),
	s({ trig = "xx", snippetType = "autosnippet" }, { t([[\times ]]) }, { condition = tex.mbw }),
	s({ trig = "::", snippetType = "autosnippet" }, { t([[\colon ]]) }, { condition = tex.in_mathzone }),
	s({ trig = "max", snippetType = "autosnippet" }, { t([[\max ]]) }, { condition = tex.in_mathzone }),
	s({ trig = "min", snippetType = "autosnippet" }, { t([[\min ]]) }, { condition = tex.in_mathzone }),

	s({ trig = "oo", snippetType = "autosnippet" }, { t([[\infty]]) }, { condition = tex.in_mathzone }),
	s({ trig = "pf", snippetType = "autosnippet" }, { t([[+\infty]]) }, { condition = tex.in_mathzone }),
	s({ trig = "nf", snippetType = "autosnippet" }, { t([[-\infty]]) }, { condition = tex.in_mathzone }),
}
